input {
	beats {
		port => 5044
	
	}
}

filter {
	if [type] == "newmanager"{

		grok {
			match => { "message" => "(?<logdate>%{MONTHDAY}-%{MONTH}-%{YEAR} %{HOUR}:?%{MINUTE}(?::?%{SECOND})\.(?:[0-9][0-9][0-9])) %{WORD:tab} %{GREEDYDATA:message}" }
			overwrite => [ "message" ]
		}
	   
	    date {
			match => [ "logdate", "dd-MMM-yyyy HH:mm:ss.SSS" ]
	    }
		
		mutate {
			remove_field => ["logdate"]
		}
	   
	}
	else  if [type] == "manager"{
		grok {
			match => { "message" => "%{TIMESTAMP_ISO8601:log_timestamp} \[%{DATA}\] %{WORD:tab} %{GREEDYDATA:message}" }
			overwrite => [ "message" ]
		}
		
	    date {
			match => [ "log_timestamp", "YYYY-MM-dd HH:mm:ss" ]
	    }

		mutate {
			remove_field => ["log_timestamp"]
		}
	}

	else  if [type] == "smanager"{
		grok {
			match => { "message" => "%{TIMESTAMP_ISO8601:log_timestamp} \[%{DATA}\] %{WORD:tab} %{GREEDYDATA:message}" }
			overwrite => [ "message" ]
		}
		
	    date {
			match => [ "log_timestamp", "YYYY-MM-dd HH:mm:ss" ]
	    }

		mutate {
			remove_field => ["log_timestamp"]
		}
	
	}

	else  if [type] == "portalapi"{
		grok {
			match => { "message" => "(?<logdate>[0-9]{8} %{HOUR}:?%{MINUTE}(?::?%{SECOND})) \[%{DATA}\] %{WORD:tab} %{GREEDYDATA:message}" }
			overwrite => [ "message" ]
		}
		
	    date {
			match => [ "logdate", "YYYYMMdd HH:mm:ss" ]
	    }

		mutate {
			remove_field => ["logdate"]
		}
	
	}

	else  if [type] == "paycenter"{
		grok {
			match => { "message" => "(?<logdate>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{HOUR}:?%{MINUTE}(?::?%{SECOND})\.(?:[0-9]{3})) %{WORD:tab} %{GREEDYDATA:message}" }
			overwrite => [ "message" ]
		}
		
	    date {
			match => [ "logdate", "YYYY-MM-dd HH:mm:ss.SSS" ]
	    }

		mutate {
			remove_field => ["logdate"]
		}
	
	}

	else  if [type] == "ltsAdmin"{
		grok {
			match => { "message" => "\[%{WORD:tab}\s\] \[(?<logdate>%{HOUR}:?%{MINUTE}(?::?%{SECOND}))\] %{GREEDYDATA:message}" }
			overwrite => [ "message" ]
		}
	}
	
	else  if [type] == "pms"{
		grok {
			match => { "message" => "(?<logdate>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{HOUR}:?%{MINUTE}(?::?%{SECOND})\.(?:[0-9]{3})) \[%{DATA}\] %{WORD:tab} %{GREEDYDATA:message}" }
			overwrite => [ "message" ]
		}
		
	    date {
			match => [ "logdate", "YYYY-MM-dd HH:mm:ss.SSS" ]
	    }

		mutate {
			remove_field => ["logdate"]
		}	
	}

	else  if [type] == "backend-web"{
		grok {
			match => { "message" => "\[(?<logdate>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{HOUR}:%{MINUTE}:%{SECOND}\.[0-9]{3})\] \[%{DATA}\] \[%{WORD:tab}\] %{GREEDYDATA:message}" }
			overwrite => [ "message" ]
		}
	    date {
			match => [ "logdate", "YYYY-MM-dd HH:mm:ss.SSS" ]
	    }

		mutate {
			remove_field => ["logdate"]
		}	
	}

	else if [type] == "nginx"{
		grok {
			patterns_dir => ["/usr/share/logstash/pipeline/patterns"]
			match => { "message" => "%{HTTPDATE:log_timestamp} # (%{IPV4:remove_addr}:%{POSINT}) # %{DATA:httpUrl} # (?:%{DATA:upstream_addr}|-) # %{USERNAME:remove_user} # %{DATA:http_user_agent} # %{BASE16FLOAT:request_time} # (?:%{RESPONSETIME:upstream_response_time}|-) # %{DATA:request} # (?:%{WORD:request_method}|-) # (?:%{BASE16FLOAT:request_length}|-) # (?:%{BASE16FLOAT:body_bytes_sent}|-) # (?:%{STATUS:http_status}|-) # (?:%{STATUS:upsteam_status}|-)" }
		}
		geoip {
			source => "remove_addr"
		}
	    date {
			match => [ "log_timestamp", "dd/MMM/YYYY:HH:mm:ss Z" ]
	    }

		mutate {
			remove_field => ["log_timestamp"]
		#	remove_field => ["message"]
		}
	}

	else if [type] == "nginx-error"{
		grok {
			match => {"message" => ["(?<timestamp>%{YEAR}[./-]%{MONTHNUM}[./-]%{MONTHDAY}[- ]%{TIME}) \[%{DATA:err_severity}\] (%{NUMBER:pid:int}#%{NUMBER}:\s{1,}\*%{NUMBER}) (%{GREEDYDATA:errormessage}),\sclient:\s(%{IPV4:remove_addr}),\sserver:\s(%{HOSTNAME:server}),\srequest:\s\"(%{GREEDYDATA:request})\",\supstream:\s\"(%{GREEDYDATA:upstream})\",\shost:\s\"(%{HOSTNAME:host})\",\sreferrer:\s\"(%{GREEDYDATA:referrer})\"",
									"(?<timestamp>%{YEAR}[./-]%{MONTHNUM}[./-]%{MONTHDAY}[- ]%{TIME}) \[%{DATA:err_severity}\] (%{NUMBER:pid:int}#%{NUMBER}:\s{1,}\*%{NUMBER}) (%{GREEDYDATA:errormessage}),\sclient:\s(%{IPV4:remove_addr}),\sserver:\s(%{HOSTNAME:server}),\srequest:\s\"(%{GREEDYDATA:request})\",\shost:\s\"(%{HOSTNAME:host})\",\sreferrer:\s\"(%{GREEDYDATA:referrer})\"",				    
									"(?<timestamp>%{YEAR}[./-]%{MONTHNUM}[./-]%{MONTHDAY}[- ]%{TIME}) \[%{DATA:err_severity}\] (%{NUMBER:pid:int}#%{NUMBER}:\s{1,}\*%{NUMBER}) (%{GREEDYDATA:errormessage}),\sclient:\s(%{IPV4:remove_addr}),\sserver:\s(%{HOSTNAME:server}),\srequest:\s\"(%{GREEDYDATA:request})\",\shost:\s\"(%{GREEDYDATA:host})\"",
									"(?<timestamp>%{YEAR}[./-]%{MONTHNUM}[./-]%{MONTHDAY}[- ]%{TIME}) \[%{DATA:err_severity}\] (%{NUMBER:pid:int}#%{NUMBER}:\s{1,}\*%{NUMBER}) (%{GREEDYDATA:errormessage}),\sclient:\s(%{IPV4:remove_addr}),\sserver:\s(%{HOSTNAME:server})",
									"(?<timestamp>%{YEAR}[./-]%{MONTHNUM}[./-]%{MONTHDAY}[- ]%{TIME}) \[%{DATA:err_severity}\] (%{NUMBER:pid:int}#%{NUMBER}:) %{GREEDYDATA:errormessage}"
									]
					}	
			#overwrite => [ "message" ]
		}
		geoip {
			source => "remove_addr"
		}
	    date {
			match => [ "timestamp", "yyyy/MM/dd HH:mm:ss" ]
	    }

		mutate {
			remove_field => ["timestamp"]
		#	remove_field => ["message"]
		}
	}

}

output {

	if [type] == "newmanager"{
		elasticsearch {
			hosts => ["elasticsearch:9200"]
			index => "logstash-newmanager-%{+YYYY.MM.dd}"
			user => "elastic"
			password => "Xl&j$DvB@MvLF%Ut"
		}
	
	}

	else if [type] == "manager"{
		elasticsearch {
			hosts => ["elasticsearch:9200"]
			index => "logstash-manager-%{+YYYY.MM.dd}"
			user => "elastic"
			password => "Xl&j$DvB@MvLF%Ut"
		}
	
	}

	else if [type] == "smanager"{
		elasticsearch {
			hosts => ["elasticsearch:9200"]
			index => "logstash-smanager-%{+YYYY.MM.dd}"
			user => "elastic"
			password => "Xl&j$DvB@MvLF%Ut"
		}
	
	}
	
	else if [type] == "portalapi"{
		elasticsearch {
			hosts => ["elasticsearch:9200"]
			index => "logstash-portalapi-%{+YYYY.MM.dd}"
			user => "elastic"
			password => "Xl&j$DvB@MvLF%Ut"
		}
	
	}

	else if [type] == "paycenter"{
		elasticsearch {
			hosts => ["elasticsearch:9200"]
			index => "logstash-paycenter-%{+YYYY.MM.dd}"
			user => "elastic"
			password => "Xl&j$DvB@MvLF%Ut"
		}
	
	}
	
	else if [type] == "ltsAdmin"{
		elasticsearch {
			hosts => ["elasticsearch:9200"]
			index => "logstash-ltsadmin-%{+YYYY.MM.dd}"
			user => "elastic"
			password => "Xl&j$DvB@MvLF%Ut"
		}
	
	}
	
	else if [type] == "pms"{
		elasticsearch {
			hosts => ["elasticsearch:9200"]
			index => "logstash-pms-%{+YYYY.MM.dd}"
			user => "elastic"
			password => "Xl&j$DvB@MvLF%Ut"
		}
	
	}

	else if [type] == "backend-web"{
		elasticsearch {
			hosts => ["elasticsearch:9200"]
			index => "logstash-backend-web-%{+YYYY.MM.dd}"
			user => "elastic"
			password => "Xl&j$DvB@MvLF%Ut"
		}
	
	}
	
	else if [type] == "nginx"{
		elasticsearch {
			hosts => ["elasticsearch:9200"]
			index => "logstash-nginx-%{+YYYY.MM.dd}"
			user => "elastic"
			password => "Xl&j$DvB@MvLF%Ut"
		}
	
	}
	
	else if [type] == "nginx-error"{
		elasticsearch {
			hosts => ["elasticsearch:9200"]
			index => "logstash-nginxerror-%{+YYYY.MM.dd}"
			user => "elastic"
			password => "Xl&j$DvB@MvLF%Ut"
		}
	
	}

  stdout { codec => rubydebug }
}
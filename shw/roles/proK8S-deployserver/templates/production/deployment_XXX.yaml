# 服务端口
server.port=8081
#路径
server.servlet.context-path=/market
# 服务名称
spring.application.name=vvic-market
# 注册中心地址
eureka.client.serviceUrl.defaultZone=http://192.168.150.184:8761/eureka/,http://192.168.150.184:8762/eureka/,http://192.168.150.184:8763/eureka/
# 服务实例名称
eureka.instance.instance-id=${spring.cloud.client.ip-address}:${server.port}
# 采用ip + port 方式访问
eureka.instance.prefer-ip-address=true
# 指示eureka服务器自收到之后等待的时间（以秒为单位）最后一次心跳
eureka.instance.lease-expiration-duration-in-seconds=2
# 指示eureka客户端发送心跳所需的频率（以秒为单位
eureka.instance.lease-renewal-interval-in-seconds=2
root.logger.level=info




# ip地址
redis.hostName=r-bp1f1d19ccae28e4.redis.rds.aliyuncs.com
# 端口号
redis.port=6379
# 使用数据库
redis.database=4
# 如果有密码
redis.password=vWb5S8hQJjKoNSqN
# 最大空闲数
redis.maxIdle=300
# 连接池的最大数据库连接数。设为0表示无限制,如果是jedis 2.4以后用redis.maxTotal
redis.max-idle=600
# 控制一个pool可分配多少个jedis实例,用来替换上面的redis.maxActive,如果是jedis 2.4以后用该属性
redis.maxTotal=1000
# 最大建立连接等待时间。如果超过此时间将接到异常。设为-1表示无限制。
redis.maxWaitMillis=1000
# 连接的最小空闲时间 默认1800000毫秒(30分钟)
redis.minEvictableIdleTimeMillis=300000
# 每次释放连接的最大数目,默认3
redis.numTestsPerEvictionRun=1024
# 逐出扫描的时间间隔(毫秒) 如果为负数,则不运行逐出线程, 默认-1
redis.timeBetweenEvictionRunsMillis=30000
# 是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个
redis.testOnBorrow=true
# 在空闲时检查有效性, 默认false
redis.testWhileIdle=true

# mysql
# 数据源连接URL
spring.datasource.url=jdbc:mysql://rm-bp1mtf59i37vd24b9.mysql.rds.aliyuncs.com:3306/vvic?rewriteBatchedStatements=true&useUnicode=true&characterEncoding=utf8&autoReconnect=true&allowMultiQueries=true
# 数据库用户名
spring.datasource.username=prerun
# 数据库用户密码
spring.datasource.password=Hm9LUTNoxZFBNClZ
# 数据源驱动
spring.datasource.driver-class-name=com.mysql.jdbc.Driver



# druid
# 配置初始化大小
spring.datasource.druid.initial-size=5
# 配置最大活跃链接
spring.datasource.druid.max-active=50
# 配置最小链接数量
spring.datasource.druid.min-idle=5
# 配置获取连接等待超时的时间
spring.datasource.druid.max-wait=60000
# 配置PSCache
spring.datasource.druid.pool-prepared-statements=false
# 指定每个连接上PSCache的大小
spring.datasource.druid.max-pool-prepared-statement-per-connection-size=-1
# 校验SQL
spring.datasource.druid.validation-query=SELECT 1
# 校验SQL超时时间
spring.datasource.druid.validation-query-timeout=30000
# 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
spring.datasource.druid.test-on-borrow=false
# 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
spring.datasource.druid.test-on-return=false
# 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效
spring.datasource.druid.test-while-idle=true
# 检测连接的间隔时间
spring.datasource.druid.time-between-eviction-runs-millis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.druid.min-evictable-idle-time-millis=30000
# 合并多个DruidDataSource的监控数据
spring.datasource.druid.use-global-data-source-stat=true

#跨域配置
cors_filter_allow_origin=*


# 对于一个新建连接，内核要发送多少个 SYN 连接请求才决定放弃。
# 不应该大于255，默认值是5，对应于180秒左右时间。。
# (对于大负载而物理通信良好的网络而言,这个值偏高,可修改为2.这个值仅仅是针对对外的连接,对进来的连接,是由tcp_retries1决定的)
net.ipv4.tcp_syn_retries = 1

# 对于远端的连接请求SYN，内核会发送SYN ＋ ACK数据报，
# 以确认收到上一个 SYN连接请求包。这是所谓的三次握手( threeway handshake)机制的第二个步骤。
# 这里决定内核在放弃连接之前所送出的 SYN+ACK 数目。不应该大于255，默认值是5，对应于180秒左右时间。
net.ipv4.tcp_synack_retries = 1

# TCP发送keepalive探测消息的间隔时间（秒），用于确认TCP连接是否有效。防止两边建立连接但不发送数据的攻击。
net.ipv4.tcp_keepalive_time = 600

# TCP发送keepalive探测消息的间隔时间（秒），用于确认TCP连接是否有效。
net.ipv4.tcp_keepalive_probes = 3

# 探测消息未获得响应时，重发该消息的间隔时间（秒）。默认值为75秒。 
# (对于普通应用来说,这个值有一些偏大,可以根据需要改小.特别是web类服务器需要改小该值,15是个比较合适的值)
net.ipv4.tcp_keepalive_intvl =15

# 在丢弃激活(已建立通讯状况)的TCP连接之前﹐需要进行多少次重试。
# 默认值为15，根据RTO的值来决定，相当于13-30分钟(RFC1122规定，必须大于100秒).
# (这个值根据目前的网络设置,可以适当地改小,我的网络内修改为了5)
net.ipv4.tcp_retries2 = 5

# 对于本端断开的socket连接，TCP保持在FIN-WAIT-2状态的时间。
# 对方可能会断开连接或一直不结束连接或不可预料的进程死亡。默认值为 60 秒。
net.ipv4.tcp_fin_timeout = 2

# 系统在同时所处理的最大 timewait sockets 数目。
# 如果超过此数的话﹐time-wait socket 会被立即砍除并且显示警告信息。
# 之所以要设定这个限制﹐纯粹为了抵御那些简单的 DoS 攻击﹐不过﹐如果网络条件需要比默认值更多﹐则可以提高它(或许还要增加内存)。
# (事实上做NAT的时候最好可以适当地增加该值)
net.ipv4.tcp_max_tw_buckets = 36000

# 打开快速 TIME-WAIT sockets 回收。
# 除非得到技术专家的建议或要求﹐请不要随意修改这个值。(做NAT的时候，建议打开它)
net.ipv4.tcp_tw_recycle = 1

# 表示是否允许重新应用处于TIME-WAIT状态的socket用于新的TCP连接
# (这个对快速重启动某些服务,而启动后提示端口已经被使用的情形非常有帮助)
net.ipv4.tcp_tw_reuse = 1

# 系统所能处理不属于任何进程的TCP sockets最大数量。
# 假如超过这个数量﹐那么不属于任何进程的连接会被立即reset，并同时显示警告信息。
# 之所以要设定这个限制﹐纯粹为了抵御那些简单的 DoS 攻击﹐千万不要依赖这个或是人为的降低这个限制。
# 如果内存大更应该增加这个值。(这个值Redhat AS版本中设置为32768,但是很多防火墙修改的时候,建议该值修改为2000)
net.ipv4.tcp_max_orphans = 32768

# 只有在内核编译时选择了CONFIG_SYNCOOKIES时才会发生作用。
# 当出现syn等候队列出现溢出时象对方发送syncookies。目的是为了防止syn flood攻击。
net.ipv4.tcp_syncookies = 1

# 对于那些依然还未获得客户端确认的连接请求﹐需要保存在队列中最大数目。
# 对于超过 128Mb 内存的系统﹐默认值是 1024 ﹐低于 128Mb 的则为 128。
# 如果服务器经常出现过载﹐可以尝试增加这个数字。
# 警告﹗假如您将此值设为大于 1024﹐最好修改include/net/tcp.h里面的TCP_SYNQ_HSIZE﹐以保持TCP_SYNQ_HSIZE16
# (SYN Flood攻击利用TCP协议散布握手的缺陷，伪造虚假源IP地址发送大量TCP-SYN半打开连接到目标系统，最终导致目标系统Socket队列资源耗尽而无法接受新的连接。为了应付这种攻击，现代Unix系统中普遍采用多连接队列处理的方式来缓冲(而不是解决)这种攻击，是用一个基本队列处理正常的完全连接应用(Connect()和Accept() )，是用另一个队列单独存放半打开连接。
# 这种双队列处理方式和其他一些系统内核措施(例如Syn-Cookies/Caches)联合应用时，能够比较有效的缓解小规模的SYN Flood攻击(事实证明)
net.ipv4.tcp_max_syn_backlog = 16384

# 发送缓存设置
# min：为TCP socket预留用于发送缓冲的内存最小值。每个tcp socket都可以在建议以后都可以使用它。默认值为4096(4K)。
# default：为TCP socket预留用于发送缓冲的内存数量，默认情况下该值会影响其它协议使用的net.core.wmem_default 值，一般要低于net.core.wmem_default的值。默认值为16384(16K)。
# max: 用于TCP socket发送缓冲的内存最大值。该值不会影响net.core.wmem_max，"静态"选择参数SOSNDBUF则不受该值影响。默认值为131072(128K)。（对于服务器而言，增加这个参数的值对于发送数据很有帮助,在我的网络环境中,修改为了51200 131072 204800）
net.ipv4.tcp_wmem = 8192 131072 16777216

# 接收缓存设置（同tcp_wmem）
net.ipv4.tcp_rmem = 32768 131072 16777216

# low：当TCP使用了低于该值的内存页面数时，TCP不会考虑释放内存。即低于此值没有内存压力。(理想情况下，这个值应与指定给 tcp_wmem 的第 2 个值相匹配 - 这第 2 个值表明，最大页面大小乘以最大并发请求数除以页大小 (131072 300 / 4096)。 )
# pressure：当TCP使用了超过该值的内存页面数量时，TCP试图稳定其内存使用，进入pressure模式，当内存消耗低于low值时则退出pressure状态。(理想情况下这个值应该是 TCP 可以使用的总缓冲区大小的最大值 (204800 300 / 4096)。 )
# high：允许所有tcp sockets用于排队缓冲数据报的页面量。(如果超过这个值，TCP 连接将被拒绝，这就是为什么不要令其过于保守 (512000 300 / 4096) 的原因了。 在这种情况下，提供的价值很大，它能处理很多连接，是所预期的 2.5 倍；或者使现有连接能够传输 2.5 倍的数据。 我的网络里为192000 300000 732000)
# 一般情况下这些值是在系统启动时根据系统内存数量计算得到的
net.ipv4.tcp_mem = 786432 1048576 1572864

# 表示用于向外连接的端口范围，默认比较小，这个范围同样会间接用于NAT表规模。
net.ipv4.ip_local_port_range = 1024 65000

# 用来限制监听(LISTEN)队列最大数据包的数量，超过这个数量就会导致链接超时或者触发重传机制。
# web应用中listen函数的backlog默认会给我们内核参数的net.core.somaxconn限制到128，而nginx定义的NGX_LISTEN_BACKLOG默认为511，所以有必要调整这个值。对繁忙的服务器,增加该值有助于网络性能
net.core.somaxconn = 16384

# 每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目，对重负载服务器而言，该值需要调高一点。
net.core.netdev_max_backlog = 16384
